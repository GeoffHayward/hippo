name: Slack Deployment Command

on:
  repository_dispatch:
    types:
      - slack-deploy-command

jobs:

  build:
    name: Build Commit
    runs-on: ubuntu-latest
    env:
      PAYLOAD_CONTEXT: ${{ toJson(github.event.client_payload) }}
      BRANCH: ${{ github.event.client_payload.data.text }}
      CHANNEL_ID: ${{ github.event.client_payload.data.channel_id }}
      RESPONSE_URL: ${{  github.event.client_payload.data.response_url }}
      USER_NAME: ${{  github.event.client_payload.data.user_name }}
      TOKEN: ${{  github.event.client_payload.data.token }}

    steps:
      #
      # Debugging info
      #
      - name: Print payload for debugging
        run: |
          echo "PAYLOAD_CONTEXT: $PAYLOAD_CONTEXT"

      #
      # Identify target server
      #
      - name: Identify target
        uses: actions/github-script@v3
        id: find-target
        with:
          script: |
            const environments = {
              C01KGP0B78R: 'debugging',
              C011BKDNUS1: 'dev',
              C01119ANCJE: 'tst',
              C01119BULFL: 'trn'
            }
            if(environments[`${process.env.CHANNEL_ID}`] === undefined) {
              core.setFailed("No target environment has been identifed.")
            } else {
              return environments[`${process.env.CHANNEL_ID}`]
            }

      - name: Slack message (failed to identify the target)
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.RESPONSE_URL }}
          data: '{ "response_type": "in_channel", "text": "Pipeline Failed!", "attachments": [{ "text" : "Cannot find the target server. Are you running the command from the correct channel?",  "color": "#DA291C" }] }'

      - name: Print Identify target for debugging
        run: |
          echo ${{steps.find-target.outputs.result}}

      #
      # Checkout the branch
      #
      - name: Slack message (checking out the branch)
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.RESPONSE_URL }}
          data: '{ "response_type": "in_channel", "text": "Pipeline progress...", "attachments": [{ "text" : "Checking out the repository on the given branch", "color": "#78BE20" }] }'

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}

      - name: Slack message (failed to checkout the branch)
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.RESPONSE_URL }}
          data: '{ "response_type": "in_channel", "text": "Pipeline Failed!", "attachments": [{ "text" : "Cannot find the branch named ${{ env.BRANCH }}",  "color": "#DA291C" }] }'


      #
      # Build the branch
      #
      - name: Slack message (building the branch)
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.RESPONSE_URL }}
          data: '{ "response_type": "in_channel", "text": "Pipeline progress...", "attachments": [{ "text" : "Building project", "color": "#78BE20" }] }'

      - name: Setup Maven repository cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: m2-cache

      - name: Build branch
        run: make clean build
        env:
          HIPPO_MAVEN_PASSWORD: ${{ secrets.HIPPO_MAVEN_PASSWORD }}
          HIPPO_MAVEN_USERNAME: ${{ secrets.HIPPO_MAVEN_USERNAME }}

      - name: Slack message (failed to build the branch)
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.RESPONSE_URL }}
          data: '{ "response_type": "in_channel", "text": "Pipeline Failed!", "attachments": [{ "text" : "Failed to build the branch named ${{ env.BRANCH }}",  "color": "#DA291C" }] }'


      #
      # Upload the build
      #
      - name: Slack message (uploading the build)
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.RESPONSE_URL }}
          data: '{ "response_type": "in_channel", "text": "Pipeline progress...", "attachments": [{ "text" : "Uploading the build to RunDeck", "color": "#78BE20" }] }'

      - name: Build branch
        run: make ondemand.upload

      - name: Slack message (failed to build the branch)
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.RESPONSE_URL }}
          data: '{ "response_type": "in_channel", "text": "Pipeline Failed!", "attachments": [{ "text" : "Failed to upload the build",  "color": "#DA291C" }] }'


      #
      # Request deployment from RunDeck
      #
      - name: Slack message (deploying the build)
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.RESPONSE_URL }}
          data: '{ "response_type": "in_channel", "text": "Pipeline progress...", "attachments": [{ "text" : "Requesting a deployment on RunDeck going to ${{steps.find-target.outputs.result}}", "color": "#78BE20" }] }'

      - name: Build branch
        id: pipeline-deploy
        run: make ondemand.pipeline-deploy
        env:
          ENV: ${{steps.find-target.outputs.result}}
          RD_URL: ${{ secrets.RD_URL }}
          RD_USER: ${{ secrets.RD_USER }}
          RD_PASSWORD: ${{ secrets.RD_PASSWORD }}
          RD_AUTH_PROMPT: false
          RD_COLOR: 0

      - name: Slack message (failed to deploy)
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.RESPONSE_URL }}
          data: '{ "response_type": "in_channel", "text": "Pipeline Failed!", "attachments": [{ "text" : "RunDeck failed to start a deployment",  "color": "#DA291C" }] }'


      #
      # End with a success message
      #
      - name: Slack message (deploying the build)
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.RESPONSE_URL }}
          data: '{ "response_type": "in_channel", "text": "Pipeline progress...", "attachments": [{ "text" : "RunDeck is deploying. Track progress here ${{steps.pipeline-deploy.outputs.result}}", "color": "#78BE20" }] }'
